- NPM is really two things:
    1. A standardized repository for node packages published by other developers that we can use for free.
    2. A command line tool to easily install and manage those packages in our Node projects

- Node which we installed already comes with the npm command line tool that we can use to install and node packages.
        Note: When I say command line tool, I dont actually mean an independent cli interface. A command line tool is simply an application that runs on the command line. 
        For ex] When I type: "npm install react", here the command-line tool is "npm" and "install" is the command-line option/flag and "react" is the argument.

- When a node package is installed, a new folder is automatically created for us called node_modules. It contains all the npm packages installed and all of their dependencies. By default npm packages are installed only for the directory where the command is run, but we can also install npm packages globally so that it is available system wide and can be used by multiple projects, by using the global(-g) flag. When we install packages globally they are stored at C:\Users\<YourUsername>\AppData\Roaming\npm\node_modules

- package-lock.json is a file automatically generated by npm when we install or update packages in our project. It records the exact versions of all the packages and their dependencies that were installed in our project.

- package.json: For every single project/package there exists a file called package.json containing metadata about the project such as the project's name, version, description, author, and license. It also lists the project's dependencies, including their names and version. For ex] When I create a react app, it is a project. This project will have its own package.json file. Then if we install any packages for our project, those packages will also have their own package.json file cause each package in itself is also a project. And all of the dependecies of the installed package will also have their own package.json file and so on.

- When we create a project in react using vite, a package.json file is automatically created for us. But if we were not using react, then to create a package.json file for our project, we use the command "npm init". If we didn't do that and went on to install any packagages, the package would still be installed in the node_modules folder but we would get an error message saying "package.json is missing".

- Even though package.json file does not mean anything to our code because the actual packages are installed in the node_modules folder, but we still keep the package.json up to sync. Why? Because when we share our project, we dont normally share the node_modules folder because it contains so many modules and that takes up a lot of space. Instead the person we share this project to can simply use the "npm install" command inside the project directory. This command will then automatically look inside the package.json file of the project and install the correct versions of all the required dependecies for the project.